{"version":3,"sources":["utils.js","Switch.jsx","App.js","reportWebVitals.js","index.js"],"names":["initBoard","isComputerFirst","board","Array","fill","makeRandomMove","symbol","tempBoard","availableMoves","map","value","index","filter","getAvailableMoves","Math","floor","random","length","minimax","Switch","state","handleChange","onClick","option1","option2","title","className","App","useState","setIsComputerFirst","setBoard","winningIndexes","setWinningIndexes","isMinimaxMode","setIsMinimaxMode","resetGame","useEffect","getWinningIndexes","includes","isValidMove","move","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8e445e0.chunk.js","sourcesContent":["export const move = (board, index, isMinimaxMode) => {\n  const tempBoard = [...board];\n  tempBoard[index] = \"X\";\n  if (isMinimaxMode) {\n    return [...minimax(tempBoard)];\n  }\n  return [...makeRandomMove(tempBoard, \"O\")];\n};\n\nexport const isValidMove = (board, index) => {\n  return board[index] === \"\";\n};\n\nexport const getWinningIndexes = (board) => {\n  // check horizontals\n  if (\n    board[0] === board[1] &&\n    board[1] === board[2] &&\n    (board[0] === \"X\" || board[0] === \"O\")\n  ) {\n    return [0, 1, 2];\n  } else if (\n    board[3] === board[4] &&\n    board[4] === board[5] &&\n    (board[3] === \"X\" || board[3] === \"O\")\n  ) {\n    return [3, 4, 5];\n  } else if (\n    board[6] === board[7] &&\n    board[7] === board[8] &&\n    (board[6] === \"X\" || board[6] === \"O\")\n  ) {\n    return [6, 7, 8];\n  }\n  // check verticals\n  if (\n    board[0] === board[3] &&\n    board[3] === board[6] &&\n    (board[0] === \"X\" || board[0] === \"O\")\n  ) {\n    return [0, 3, 6];\n  } else if (\n    board[1] === board[4] &&\n    board[4] === board[7] &&\n    (board[1] === \"X\" || board[1] === \"O\")\n  ) {\n    return [1, 4, 7];\n  } else if (\n    board[2] === board[5] &&\n    board[5] === board[8] &&\n    (board[2] === \"X\" || board[2] === \"O\")\n  ) {\n    return [2, 5, 8];\n  }\n\n  // check diagonals\n  if (\n    board[0] === board[4] &&\n    board[4] === board[8] &&\n    (board[0] === \"X\" || board[0] === \"O\")\n  ) {\n    return [0, 4, 8];\n  } else if (\n    board[2] === board[4] &&\n    board[4] === board[6] &&\n    (board[2] === \"X\" || board[2] === \"O\")\n  ) {\n    return [2, 4, 6];\n  }\n\n  return null;\n};\n\nexport const getAvailableMoves = (board) => {\n  return board\n    .map((value, index) => (value !== \"X\" && value !== \"O\" ? index : null))\n    .filter((value) => value !== null);\n};\n\nexport const initBoard = (isComputerFirst) => {\n  const board = Array(9).fill(\"\");\n  if (isComputerFirst) {\n    return [...makeRandomMove(board, \"O\")];\n  }\n\n  return [...board];\n};\n\nexport const makeRandomMove = (board, symbol) => {\n  const tempBoard = [...board];\n  const availableMoves = getAvailableMoves(tempBoard);\n  const randomIndex = Math.floor(Math.random() * availableMoves.length);\n  tempBoard[availableMoves[randomIndex]] = symbol;\n  return [...tempBoard];\n};\n\nexport const minimax = (board) => {\n  return [...board];\n};\n","import React from \"react\";\nimport \"./switch.css\";\n\nexport const Switch = ({ state, onClick: handleChange, option1, option2, title }) => (\n  <div className=\"root\">\n    <p>{option1}</p>\n    <div className=\"switchContainer\">\n      <p>{title}</p>\n      <div\n        className={`pill ${state ? \"active\" : \"\"}`}\n        onClick={() => handleChange()}\n      >\n        <div className=\"slider\" />\n      </div>\n    </div>\n    <p>{option2}</p>\n  </div>\n);\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { move, initBoard, getWinningIndexes, isValidMove } from \"./utils\";\nimport { Switch } from \"./Switch\";\n\n//todo\n//\n\nconst App = () => {\n  const [isComputerFirst, setIsComputerFirst] = useState(true);\n  const [board, setBoard] = useState(initBoard(isComputerFirst));\n  const [winningIndexes, setWinningIndexes] = useState([]);\n  const [isMinimaxMode, setIsMinimaxMode] = useState(true);\n\n  const resetGame = () => {\n    setBoard([...initBoard(isComputerFirst)]);\n    setWinningIndexes([]);\n  };\n\n  useEffect(() => {\n    setWinningIndexes(getWinningIndexes(board));\n  }, [board]);\n\n  useEffect(() => {\n    resetGame();\n    //eslint-disable-next-line\n  }, [isComputerFirst, isMinimaxMode]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"grid\">\n        {board.map((value, index) => (\n          <div\n            key={index}\n            className={`box ${\n              winningIndexes && winningIndexes.includes(index) ? \"green\" : \"\"\n            }`}\n            onClick={() => {\n              if (!winningIndexes && isValidMove(board, index)) {\n                setBoard(move(board, index, isMinimaxMode));\n              }\n            }}\n          >\n            <p className={`${value === \"X\" ? \"greenText\" : \"redText\"}`}>\n              {value}\n            </p>\n          </div>\n        ))}\n      </div>\n      <div className=\"controls\">\n        <Switch\n          state={isMinimaxMode}\n          onClick={() => {\n            setIsMinimaxMode(!isMinimaxMode);\n          }}\n          title=\"Algorithm\"\n          option1=\"Random\"\n          option2=\"Minimax\"\n        />\n        <Switch\n          state={isComputerFirst}\n          onClick={() => {\n            setIsComputerFirst(!isComputerFirst);\n          }}\n          title=\"First move\"\n          option1=\"Player\"\n          option2=\"Computer\"\n        />\n      </div>\n      <button onClick={resetGame}>Reset</button>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}